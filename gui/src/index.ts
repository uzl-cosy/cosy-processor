import { app, BrowserWindow, ipcMain, powerMonitor } from "electron";
import { ChildProcess } from "child_process";
import { createCosyProcess } from "./cosy";
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit();
}

let cosyProcess: null | ChildProcess = null;

/**
 * Create the main window
 */
const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
    icon: "assets/icon.icns",
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // mainWindow.setAlwaysOnTop(true);

  // Open the DevTools.
  // mainWindow.webContents.openDevTools();

  /**
   * Handle the start-cosy event from the renderer process
   * @param event The event object
   * @param command The command to run
   * @param cwd The working directory
   */
  function handleStartCosy(
    event: Electron.IpcMainEvent,
    command: string,
    cwd: string
  ) {
    console.log(`Received start-cosy event from ${event.sender.id}`);
    console.log(`Starting script with command: ${command} and cwd: ${cwd}`);
    cosyProcess = createCosyProcess(command, cwd);
    cosyProcess.stdout.on("data", (data) => {
      try {
        mainWindow.webContents.send("cosy-stdout", data.toString());
      } catch (e) {
        console.error(e);
      }
    });

    cosyProcess.stderr.on("data", (data) => {
      try {
        mainWindow.webContents.send("cosy-stderr", data.toString());
      } catch (e) {
        console.error(e);
      }
    });

    cosyProcess.on("close", (code) => {
      try {
        mainWindow.webContents.send("cosy-exit", code);
      } catch (e) {
        console.error(e);
      }
    });
  }

  /**
   * Handle the stop-cosy event from the renderer process
   */
  function handleStopCosy() {
    console.log(`Received stop-cosy event`);
    if (cosyProcess) {
      console.log(`Killing CoSy process`);
      cosyProcess.kill("SIGINT");
      cosyProcess = null;
    }
  }

  ipcMain.on("start-cosy", handleStartCosy);
  ipcMain.on("stop-cosy", handleStopCosy);

  // Detect when lid is closed and stop the Cosy process
  powerMonitor.on("suspend", () => {
    console.log("Lid closed or low power. Stopping Cosy");
    handleStopCosy();
  });
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});
